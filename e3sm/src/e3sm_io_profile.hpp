/* Do not edit this file. It is produced from the corresponding .m4 source */
/*
 *  Copyright (C) 2021, Northwestern University and Argonne National Laboratory
 *  See COPYRIGHT notice in top-level directory.
 */
/* $Id$ */



#pragma once

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#ifdef E3SM_IO_PROFILING

/*
 * Report performance profiling
 */

#define E3SM_IO_NTIMER 48

#define E3SM_IO_TIMER_TOTAL 0
#define E3SM_IO_TIMER_CORE 1
#define E3SM_IO_TIMER_WR 2
#define E3SM_IO_TIMER_RD 3
#define E3SM_IO_TIMER_INIT_CASE 4
#define E3SM_IO_TIMER_INIT_DRIVER 5
#define E3SM_IO_TIMER_HDF5 6
#define E3SM_IO_TIMER_HDF5_OPEN 7
#define E3SM_IO_TIMER_HDF5_DEF_DIM 8
#define E3SM_IO_TIMER_HDF5_DEF_VAR 9
#define E3SM_IO_TIMER_HDF5_PUT_ATT 10
#define E3SM_IO_TIMER_HDF5_WR 11
#define E3SM_IO_TIMER_HDF5_SEL 12
#define E3SM_IO_TIMER_HDF5_EXT_DIM 13
#define E3SM_IO_TIMER_HDF5_SORT_REQ 14
#define E3SM_IO_TIMER_HDF5_CPY 15
#define E3SM_IO_TIMER_HDF5_RD 16
#define E3SM_IO_TIMER_HDF5_NSLAB 17
#define E3SM_IO_TIMER_HDF5_DSIZE 18
#define E3SM_IO_TIMER_HDF5_CLOSE 19
#define E3SM_IO_TIMER_ADIOS2 20
#define E3SM_IO_TIMER_ADIOS2_ENDDEF 21
#define E3SM_IO_TIMER_ADIOS2_SEL 22
#define E3SM_IO_TIMER_ADIOS2_CONVERT 23
#define E3SM_IO_TIMER_ADIOS2_OPEN 24
#define E3SM_IO_TIMER_ADIOS2_BEGIN_STEP 25
#define E3SM_IO_TIMER_ADIOS2_GET_FSIZE 26
#define E3SM_IO_TIMER_ADIOS2_DEF_VAR 27
#define E3SM_IO_TIMER_ADIOS2_INQ_VAR 28
#define E3SM_IO_TIMER_ADIOS2_PUT_ATT 29
#define E3SM_IO_TIMER_ADIOS2_PUT_VAR 30
#define E3SM_IO_TIMER_ADIOS2_GET_ATT 31
#define E3SM_IO_TIMER_ADIOS2_GET_VAR 32
#define E3SM_IO_TIMER_ADIOS2_FLUSH 33
#define E3SM_IO_TIMER_ADIOS2_CLOSE 34
#define E3SM_IO_TIMER_NC4 35
#define E3SM_IO_TIMER_NC4_OPEN 36
#define E3SM_IO_TIMER_NC4_ENDDEF 37
#define E3SM_IO_TIMER_NC4_RESIZE 38
#define E3SM_IO_TIMER_NC4_DEF_DIM 39
#define E3SM_IO_TIMER_NC4_INQ_DIM 40
#define E3SM_IO_TIMER_NC4_DEF_VAR 41
#define E3SM_IO_TIMER_NC4_INQ_VAR 42
#define E3SM_IO_TIMER_NC4_PUT_ATT 43
#define E3SM_IO_TIMER_NC4_GET_ATT 44
#define E3SM_IO_TIMER_NC4_PUT_VAR 45
#define E3SM_IO_TIMER_NC4_GET_VAR 46
#define E3SM_IO_TIMER_NC4_CLOSE 47

extern double e3sm_io_profile_times[E3SM_IO_NTIMER];
extern double e3sm_io_profile_start_time[E3SM_IO_NTIMER];
extern double e3sm_io_profile_counts[E3SM_IO_NTIMER];

#define E3SM_IO_TIMER_START(A) { \
    if (cfg->profiling){ \
        e3sm_io_profile_start_time[A] = MPI_Wtime(); \
    } \
}
#define E3SM_IO_TIMER_PAUSE(A)  { \
    if (cfg->profiling){ \
        e3sm_io_profile_times[A] += MPI_Wtime() - e3sm_io_profile_start_time[A]; \
    } \
}
#define E3SM_IO_TIMER_STOP(A)  { \
    if (cfg->profiling){ \
        E3SM_IO_TIMER_PAUSE(A) \
        e3sm_io_profile_counts[A] ++; \
    } \
}
#define E3SM_IO_TIMER_SWAP(A, B)  { \
    if (cfg->profiling){ \
        double tmp = MPI_Wtime(); \
        e3sm_io_profile_times[A] += tmp - e3sm_io_profile_start_time[A]; \
        e3sm_io_profile_counts[A] ++; \
        e3sm_io_profile_start_time[B] = tmp;  \
    } \
}
#define E3SM_IO_TIMER_STOPEX(A, B)  { \
    if (cfg->profiling){ \
        double tmp = MPI_Wtime(); \
        e3sm_io_profile_times[A] += tmp - e3sm_io_profile_start_time[A]; \
        e3sm_io_profile_counts[A] ++; \
        e3sm_io_profile_times[B] -= tmp - e3sm_io_profile_start_time[A]; \
    } \
}

#define E3SM_IO_TIMER_ADD(A, B) { \
    if (cfg->profiling){ \
        e3sm_io_profile_times[A] += B; \
        e3sm_io_profile_counts[A] ++; \
    } \
}
#else
#define E3SM_IO_TIMER_START(A)
#define E3SM_IO_TIMER_PAUSE(A)
#define E3SM_IO_TIMER_STOP(A)
#define E3SM_IO_TIMER_SWAP(A, B)
#define E3SM_IO_TIMER_STOPEX(A, B)
#define E3SM_IO_TIMER_ADD(A, B)
#endif

#ifdef __cplusplus
extern "C" {
#endif
int e3sm_io_print_profile(e3sm_io_config *cfg);
#ifdef __cplusplus
}
#endif

